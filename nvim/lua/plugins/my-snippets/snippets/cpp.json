{
	"Start": {
		"prefix": "st",
		"body": [
			"#include <iostream>",
			"",
			"int main ()",
			"{",
				"\t${1:/*code*/}",
				"",
				"\treturn 0;",
			"}"
		],
		"description": "Start Program !"
	},
	"for": {
		"prefix": "for",
		"body": [
			"for (int ${1:i} = ${2:0}; $1 < ${3:length}; $1++)",
			"{",
				"\t${5:/*code*/}",
			"}"
		],
		"description": "Code snippet \"for\""
	},
	"autofor": {
		"prefix": "autofor",
		"body": [
				"for (auto ${1:i} : ${2:iterator})",
				"{",
					"\t${3:/*code*/}",
				"}"
		],
		"description": "Code snippet \"autofor\" "
	},
	"while": {
		"prefix": "while",
		"body": [
			"while (${1:true})",
			"{",
				"\t${2:/*code*/}",
			"}"
		],
		"description": "Code snippet \"while\" "
	},
	"if": {
		"prefix": "if",
		"body": [
			"if (${1:condition})",
			"{",
				"\t${2:/*code*/}",
			"}"
		],
		"description": "Code snippet \"if\" "
	},
	"else": {
		"prefix": "else",
		"body": ["else", "{", "\t${1:/*code*/}", "}"],
		"description": "Code snippet \"else\" "
	},
	"elseif": {
		"prefix": "elif",
		"body": [
			"else if (${1:condition})",
			"{",
				"\t${2:/*code*/}",
			"}"
		],
		"description": "Code snippet \"else if\" "
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"enum ${1:Name}",
			"{",
				"\t${2:variables}",
			"};"
		],
		"description": "Code snippet \"enum\" "
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${1:Name}",
			"{",
				"\tpublic :",
					"\t\t$1 (${2:parameters});",
					"\t\t${0:/*function*/}",
				"\tprivate :",
					"\t\t${3:attributes}",
			"};"
		],
		"description": "Code snippet \"class\" "
	},
	"struct": {
		"prefix": "struct",
		"body": [
			"struct ${1:Name}",
			"{",
				"\t${2:variables}",
			"};"
		],
		"description": "Code snippet \"struct\" "
	},
	"namespace": {
		"prefix": "ns",
		"body": [
			"namespace ${1:Name}",
			"{",
				"\t${2:/*code*/}",
			"}"
		],
		"description": "Code snippet \"namespace\" "
	},
	"try": {
		"prefix": "try",
		"body": [
			"try",
			"{",
				"\t${1:/*code*/}",
			"}",
			"catch (${2:exception})",
			"{",
				"\t${3:/*code*/}",
			"}"
		],
		"description": "Code snippet \"try\" "
	},
	"union": {
		"prefix": "union",
		"body": [
			"union ${1:Name}",
			"{",
				"\t${2:/*code*/}",
			"};"
		],
		"description": "Code snippet \"union\" "
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch (${1:condition})",
			"{",
				"\tdefault :",
					"\t\t${2:/*code*/}",
					"\t\tbreak;",
				"\tcase ${3:1} :",
					"\t\t${4:/*code*/}",
			"}"
		],
		"description": "Code snippet \"switch\" "
	},
	"break": {
		"prefix": "break",
		"body": ["break;"],
		"description": "Code snippet \"break\" "
	},
	"continue": {
		"prefix": "continue",
		"body": ["continue;"],
		"description": "Code snippet \"continue\" "
	},
	"exit": {
		"prefix": "exit",
		"body": ["std::exit (0);"],
		"description": "Code snippet \"exit\" "
	},
	"return": {
		"prefix": "return",
		"body": ["return ${1:0};"],
		"description": "Code snippet \"return\" "
	}
}
